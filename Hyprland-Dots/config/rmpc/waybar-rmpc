#!/usr/bin/env sh
# waybar-rmpc: emit player-like JSON for waybar from MPD/rmpc via mpc
# Features added:
# - Normalize states to playing/paused/stopped
# - Optional icons by env var WAYBAR_RMPC_ICONS (e.g. "▶,⏸,■")
# - Configurable format via WAYBAR_RMPC_FORMAT (default: "{artist}  {title}")
# - Action handling: run with argument (play-pause|next|prev|stop) to perform control actions

MPC=$(command -v mpc || true)
[ -n "$MPC" ] || exit 0

# Default env config
: ${WAYBAR_RMPC_FORMAT:="{artist}  {title}"}
# Icons: playing, paused, stopped (comma separated)
: ${WAYBAR_RMPC_ICONS:="▶,⏸,■"}

# helper: escape string for JSON
esc() {
    printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\\"/g' -e 's/\n/\\n/g'
}

# normalize status to playing/paused/stopped
normalize_status() {
    s=$(printf '%s' "$1" | tr '[:upper:]' '[:lower:]')
    case "$s" in
        play*|playing) echo playing ;;
        pause*|paused) echo paused ;;
        stop*|stopped) echo stopped ;;
        *) echo stopped ;;
    esac
}

# print JSON line based on metadata
print_json() {
    status="$1"
    artist="$2"
    title="$3"

    status_n=$(normalize_status "$status")
    # pick icon
    IFS=','; set -- $WAYBAR_RMPC_ICONS; icon_play=$1; icon_pause=$2; icon_stop=$3; unset IFS

    case "$status_n" in
        playing) icon="$icon_play" ;;
        paused) icon="$icon_pause" ;;
        *) icon="$icon_stop" ;;
    esac

    artist_e=$(esc "$artist")
    title_e=$(esc "$title")
    text_tpl="$WAYBAR_RMPC_FORMAT"
    # replace simple placeholders {artist} and {title} and {icon}
    text=$(printf '%s' "$text_tpl" | sed -e "s/{artist}/$artist_e/g" -e "s/{title}/$title_e/g" -e "s/{icon}/$icon/g")
    tooltip="mpd : $title_e"
    alt="$status_n"
    class="$status_n"

    printf '{"text": "%s", "tooltip": "%s", "alt": "%s", "class": "%s"}\n' "$text" "$tooltip" "$alt" "$class"
}

# get current info via mpc
get_info() {
    info="$($MPC --format "%artist%\n%title%\n%status%" current 2>/dev/null)"
    if [ -z "$info" ]; then
        echo "::NOINFO::"
        return
    fi
    artist=$(printf '%s' "$info" | sed -n '1p')
    title=$(printf '%s' "$info" | sed -n '2p')
    status=$(printf '%s' "$info" | sed -n '3p' | tr -d '[]' )
    if [ -z "$status" ] || [ "$status" = "%status%" ]; then
        stline="$($MPC status 2>/dev/null | sed -n '1,1p')"
        case "$stline" in
            *"[playing]"*) status="playing" ;; 
            *"[paused]"*) status="paused" ;; 
            *"[stop]"*) status="stopped" ;; 
            *) status="stopped" ;;
        esac
    fi
    printf '%s\n%s\n%s' "$status" "$artist" "$title"
}

# If called with an action argument, perform control and exit
if [ "$#" -ge 1 ]; then
    case "$1" in
        play-pause|toggle)
            $MPC toggle >/dev/null 2>&1 || exit 1
            exit 0
            ;;
        next)
            $MPC next >/dev/null 2>&1 || exit 1
            exit 0
            ;;
        prev|previous)
            $MPC prev >/dev/null 2>&1 || exit 1
            exit 0
            ;;
        stop)
            $MPC stop >/dev/null 2>&1 || exit 0
            exit 0
            ;;
        *)
            # unknown action
            exit 2
            ;;
    esac
fi

# Initial print
cur=$(get_info)
if [ "$cur" = "::NOINFO::" ]; then
    print_json "stopped" "" "No music"
else
    status=$(printf '%s' "$cur" | sed -n '1p')
    artist=$(printf '%s' "$cur" | sed -n '2p')
    title=$(printf '%s' "$cur" | sed -n '3p')
    print_json "$status" "$artist" "$title"
fi

# Loop waiting for MPD changes
while true; do
    if $MPC idle >/dev/null 2>&1; then
        cur=$(get_info)
        if [ "$cur" = "::NOINFO::" ]; then
            print_json "stopped" "" "No music"
        else
            status=$(printf '%s' "$cur" | sed -n '1p')
            artist=$(printf '%s' "$cur" | sed -n '2p')
            title=$(printf '%s' "$cur" | sed -n '3p')
            print_json "$status" "$artist" "$title"
        fi
    else
        sleep 2
        cur=$(get_info)
        if [ "$cur" = "::NOINFO::" ]; then
            print_json "stopped" "" "No music"
        else
            status=$(printf '%s' "$cur" | sed -n '1p')
            artist=$(printf '%s' "$cur" | sed -n '2p')
            title=$(printf '%s' "$cur" | sed -n '3p')
            print_json "$status" "$artist" "$title"
        fi
    fi
done
